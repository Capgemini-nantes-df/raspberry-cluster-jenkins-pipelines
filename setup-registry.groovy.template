/**
 * This script download images on a master registry to push it on a local slave registry, installed on the
 * cluster primary node.
 */

// Primary manager IP.
def getMasterIp() {
    return "192.168.0.1" // Change it.
}

// User used to connect on each Raspberry.
def getUser() {
    return "pirate" // Default HypriotOS user.
}

// Master registry URL. Don't add protocol (http:// || https://).
def getMasterRegistryUrl() {
    return "masterregistryurl.com" // Change it.
}

// Master registry login.
def getMasterRegistryLogin() {
    return "masterregistryurl" // Change it.
}

// Master registry password.
def getMasterRegistryPassword() {
    return "L0rem1psum" // Change it.
}

// Slave registry URL.
def getSlaveRegistryUrl() {
    return "192.168.0.0:5000" // Change it.
}

/**
 * Execute ssh command on the primary node.
 * @param String command (Example : ssh pirate@192.168.0.102 docker service ls)
 */
def executeCommandOnPrimaryNode(String command) {
    try {
        sh (returnStdout: true, script: 'ssh ' + user + '@' + masterIp + ' ' + command)
    } catch(Exception e) {
        echo 'Error. Trying to execute command ' + command + '(Exception : ' + e + ')'
    }
}

/**
 * Login to the master registry with credential given in variable.
 */
def loginToMasterRegistry() {
    executeCommandOnPrimaryNode('docker login ' + masterRegistryUrl + ' -u ' + masterRegistryLogin + ' -p ' + masterRegistryPassword)
}

/**
 * Download images from master registry.
 * @param imageName
 */
def downloadImages(String imageName) {
    // Download images from master registry.
    executeCommandOnPrimaryNode('docker pull ' + masterRegistryUrl + '/' + imageName)
}

/**
 * Tag and push image to local slave registry.
 * @param imageName
 */
def pushImageToSlaveRegistry(String imageName) {
    // Tag it with the name of the local (slave) registry.
    executeCommandOnPrimaryNode('docker tag ' + masterRegistryUrl + '/' + imageName + ' ' + slaveRegistryUrl + '/' + imageName)

    // Push image on local (slave) registry.
    executeCommandOnPrimaryNode('docker push ' + slaveRegistryUrl + '/' + imageName)

    // Remove image with master registry name.
    executeCommandOnPrimaryNode('docker rmi ' + masterRegistryUrl + '/' + imageName)
}

/**
 * Download Docker Registry image for ARM.
 * IMPORTANT : keep this step. Yes, Swarm can download a distant image when a service is launch. But Jenkins don't care
 * about this, and play next step before image finish downloading (and before the service start...).
 */
def downloadDockerRegistryImage() {
    executeCommandOnPrimaryNode('docker pull armbuild/registry:2')
}

/**
 * Launch a local Docker Registry.
 */
def launchDockerRegistryService() {
    echo 'Creating Docker Registry Service on node ' + masterIp
    executeCommandOnPrimaryNode("docker service create -d --name registry -p 80:80 --replicas 1 --constraint=node.labels.registry==true --mount type=bind,src=/mnt/registry,dst=/var/lib/registry -e REGISTRY_HTTP_ADDR=0.0.0.0:80 --detach=true armbuild/registry:2")
    echo 'Docker Registry Service created : DONE'
}

node {

    final imagesMap = [
            '1' : ['IMAGE_NAME': 'image:version'],
    ]

    stage('Login to Master Registry') {
        loginToMasterRegistry()
    }

    stage('Download images from master registry') {
        imagesMap.each {
            key, value -> downloadImages(value['IMAGE_NAME'])
        }
    }

    stage('Launch slave registry') {
        downloadDockerRegistryImage()
        launchDockerRegistryService()
    }

    stage('Tag images and push it to slave registry') {
        imagesMap.each {
            key, value -> pushImageToSlaveRegistry(value['IMAGE_NAME'])
        }
    }
}