/**
 * This script launch the new website version.
 */

// Cluster DHCP pool as configured in your router.
def getDhcpPool() {
  return '192.168.0.' // Change it.
}

// User used to connect on each Raspberry.
def getUser() {
  return 'pirate' // Default HypriotOS user.
}

// Slave registry URL.
def getSlaveRegistryUrl() {
  return "192.168.0.0:5000" // Change it.
}

/**
 * This function give the ip address of a node.
 * @param String nodeNumber
 *    The node we want to execute action (ie: 101, 102, etc.)
 * @return String
 *    The Ip Address.
 */
def getNodeIp(String nodeNumber) {
  return dhcpPool + nodeNumber
}

/**
 * Execute ssh command (on the primary node).
 * TODO: set primary node var as variable.
 * @param String host
 *    '192.168.0.102' for example.
 * @param String command
 *    Example : ssh pirate@192.168.0.102 docker service ls
 */
def sendSSHCommand(String host, String command) {
  try {
    sh (returnStdout: true, script: 'ssh ' + user + '@192.168.0.101 ' + sshFromManagerNode(host, command))
  } catch(Exception e) {
    echo 'Error. Trying to execute command ' + command + '(Exception : ' + e + ')'
  }
}

/**
 *
 * @param String nodeNumber
 *    The node we want to execute action (ie: 101, 102, etc.)
 */
def updateServices(String nodeNumber) {
  def nodeIp = getNodeIp(nodeNumber)
  def command = "docker service update --image " + slaveRegistryUrl + "/resto:green --update-delay 0s --update-parallelism 2 --update-failure-action " +
      "rollback --update-order start-first resto-v1"
  echo 'Updating Website Services on node ' + nodeNumber
  sendSSHCommand(nodeIp, command)
  echo 'Cluster Website Service created : DONE'
}

node {
  /**
   * Each row store data for a node.
   *
   * NUMBER           :   IP of the node.
   * MANAGER-GROUP    :   if true, define this node as a Swarm manager.
   * PRIMARY          :   if true, define this node as the Swarm leader.
   * NAME             :   Node hostname.
   */
  final NodeInfoMap = [
      '1' : ['NUMBER': '101', 'MANAGER-GROUP': true, 'PRIMARY': true, 'NAME': 'node-1'],
      '2' : ['NUMBER': '102', 'MANAGER-GROUP': true, 'PRIMARY': false, 'NAME': 'node-2'],
      '3' : ['NUMBER': '103', 'MANAGER-GROUP': false, 'PRIMARY': false, 'NAME': 'node-3'],
      '4' : ['NUMBER': '104', 'MANAGER-GROUP': false, 'PRIMARY': false, 'NAME': 'node-4'],
      '5' : ['NUMBER': '105', 'MANAGER-GROUP': false, 'PRIMARY': false, 'NAME': 'node-5']
  ]

  stage('Launch Rolling Update Service') {
    NodeInfoMap.each {
      key, value -> if(value['PRIMARY']) {
        updateServices(value['NUMBER'])
      }
    }
  }
}